/****************************************************************************
** Meta object code from reading C++ file 'testprocessing.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testprocessing.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestProcessing_t {
    QByteArrayData data[29];
    char stringdata0[289];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestProcessing_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestProcessing_t qt_meta_stringdata_TestProcessing = {
    {
QT_MOC_LITERAL(0, 0, 14), // "TestProcessing"
QT_MOC_LITERAL(1, 15, 8), // "test_abs"
QT_MOC_LITERAL(2, 24, 0), // ""
QT_MOC_LITERAL(3, 25, 9), // "test_ceil"
QT_MOC_LITERAL(4, 35, 14), // "test_constrain"
QT_MOC_LITERAL(5, 50, 9), // "test_dist"
QT_MOC_LITERAL(6, 60, 8), // "test_exp"
QT_MOC_LITERAL(7, 69, 10), // "test_floor"
QT_MOC_LITERAL(8, 80, 9), // "test_lerp"
QT_MOC_LITERAL(9, 90, 8), // "test_log"
QT_MOC_LITERAL(10, 99, 8), // "test_mag"
QT_MOC_LITERAL(11, 108, 8), // "test_map"
QT_MOC_LITERAL(12, 117, 8), // "test_max"
QT_MOC_LITERAL(13, 126, 8), // "test_min"
QT_MOC_LITERAL(14, 135, 9), // "test_norm"
QT_MOC_LITERAL(15, 145, 8), // "test_pow"
QT_MOC_LITERAL(16, 154, 10), // "test_round"
QT_MOC_LITERAL(17, 165, 7), // "test_sq"
QT_MOC_LITERAL(18, 173, 9), // "test_sqrt"
QT_MOC_LITERAL(19, 183, 9), // "test_acos"
QT_MOC_LITERAL(20, 193, 9), // "test_asin"
QT_MOC_LITERAL(21, 203, 9), // "test_atan"
QT_MOC_LITERAL(22, 213, 10), // "test_atan2"
QT_MOC_LITERAL(23, 224, 8), // "test_cos"
QT_MOC_LITERAL(24, 233, 12), // "test_degrees"
QT_MOC_LITERAL(25, 246, 12), // "test_radians"
QT_MOC_LITERAL(26, 259, 8), // "test_sin"
QT_MOC_LITERAL(27, 268, 8), // "test_tan"
QT_MOC_LITERAL(28, 277, 11) // "test_random"

    },
    "TestProcessing\0test_abs\0\0test_ceil\0"
    "test_constrain\0test_dist\0test_exp\0"
    "test_floor\0test_lerp\0test_log\0test_mag\0"
    "test_map\0test_max\0test_min\0test_norm\0"
    "test_pow\0test_round\0test_sq\0test_sqrt\0"
    "test_acos\0test_asin\0test_atan\0test_atan2\0"
    "test_cos\0test_degrees\0test_radians\0"
    "test_sin\0test_tan\0test_random"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestProcessing[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      27,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  149,    2, 0x08 /* Private */,
       3,    0,  150,    2, 0x08 /* Private */,
       4,    0,  151,    2, 0x08 /* Private */,
       5,    0,  152,    2, 0x08 /* Private */,
       6,    0,  153,    2, 0x08 /* Private */,
       7,    0,  154,    2, 0x08 /* Private */,
       8,    0,  155,    2, 0x08 /* Private */,
       9,    0,  156,    2, 0x08 /* Private */,
      10,    0,  157,    2, 0x08 /* Private */,
      11,    0,  158,    2, 0x08 /* Private */,
      12,    0,  159,    2, 0x08 /* Private */,
      13,    0,  160,    2, 0x08 /* Private */,
      14,    0,  161,    2, 0x08 /* Private */,
      15,    0,  162,    2, 0x08 /* Private */,
      16,    0,  163,    2, 0x08 /* Private */,
      17,    0,  164,    2, 0x08 /* Private */,
      18,    0,  165,    2, 0x08 /* Private */,
      19,    0,  166,    2, 0x08 /* Private */,
      20,    0,  167,    2, 0x08 /* Private */,
      21,    0,  168,    2, 0x08 /* Private */,
      22,    0,  169,    2, 0x08 /* Private */,
      23,    0,  170,    2, 0x08 /* Private */,
      24,    0,  171,    2, 0x08 /* Private */,
      25,    0,  172,    2, 0x08 /* Private */,
      26,    0,  173,    2, 0x08 /* Private */,
      27,    0,  174,    2, 0x08 /* Private */,
      28,    0,  175,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestProcessing::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestProcessing *_t = static_cast<TestProcessing *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->test_abs(); break;
        case 1: _t->test_ceil(); break;
        case 2: _t->test_constrain(); break;
        case 3: _t->test_dist(); break;
        case 4: _t->test_exp(); break;
        case 5: _t->test_floor(); break;
        case 6: _t->test_lerp(); break;
        case 7: _t->test_log(); break;
        case 8: _t->test_mag(); break;
        case 9: _t->test_map(); break;
        case 10: _t->test_max(); break;
        case 11: _t->test_min(); break;
        case 12: _t->test_norm(); break;
        case 13: _t->test_pow(); break;
        case 14: _t->test_round(); break;
        case 15: _t->test_sq(); break;
        case 16: _t->test_sqrt(); break;
        case 17: _t->test_acos(); break;
        case 18: _t->test_asin(); break;
        case 19: _t->test_atan(); break;
        case 20: _t->test_atan2(); break;
        case 21: _t->test_cos(); break;
        case 22: _t->test_degrees(); break;
        case 23: _t->test_radians(); break;
        case 24: _t->test_sin(); break;
        case 25: _t->test_tan(); break;
        case 26: _t->test_random(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestProcessing::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestProcessing.data,
      qt_meta_data_TestProcessing,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestProcessing::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestProcessing::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestProcessing.stringdata0))
        return static_cast<void*>(const_cast< TestProcessing*>(this));
    return QObject::qt_metacast(_clname);
}

int TestProcessing::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 27)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 27;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 27)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 27;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
